{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "DAX",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#labels"
        },
        {
            "include": "#parameters"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        }
    ],
    "repository": {
        "parameters": {
            "patterns": [
                {
                    "name": "meta.function.definition.parameters.dax",
                    "begin": "\\b(?<!\\.)(VAR)\\b(?<!\\.)\\b",
                    "end": "=",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.dax"
                        },
                        "2": {
                            "name": "variable.other.readwrite.dax"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "keyword.operator.assignment.dax"
                        }
                    },
                    "patterns": [
                        {
                            "name": "keyword.control.dax",
                            "match": "(?x)\n = \n"
                        }
                    ]
                },
                {
                    "name": "variable.other.constant.dax",
                    "match": "[_$[:alpha:]][_$[:alnum:]]*"
                }
            ]
        },
        "labels": {
            "patterns": [
                {
                    "match": "(^(.*?)\\s*(:=|!=))",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.label.dax"
                        },
                        "2": {
                            "name": "entity.name.label.dax"
                        }
                    }
                }
            ]
        },
        "numbers": {
            "name": "constant.numeric.dax",
            "match": "0x[a-f\\d]+|[-+]?(?:\\.\\d+|\\d+\\.?\\d*)(?:e[-+]?\\d+)?"
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.dax",
                    "begin": "//",
                    "end": "\n",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.dax"
                        }
                    }
                },
                {
                    "name": "comment.line.dax",
                    "begin": "--",
                    "end": "\n",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.dax"
                        }
                    }
                },
                {
                    "begin": "/\\*",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.dax"
                        }
                    },
                    "end": "\\*/",
                    "name": "comment.block.dax"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "variable.language.dax",
                    "match": "\\b(SELECTEDMEASUREFORMATSTRING|APPROXIMATEDISTINCTCOUNT|OPENINGBALANCEQUARTER|CLOSINGBALANCEQUARTER|DISTINCTCOUNTNOBLANK|NATURALLEFTOUTERJOIN|CONTAINSSTRINGEXACT|OPENINGBALANCEMONTH|CLOSINGBALANCEMONTH|SELECTEDMEASURENAME|SUBSTITUTEWITHINDEX|ROLLUPADDISSUBTOTAL|CLOSINGBALANCEYEAR|FIRSTNONBLANKVALUE|OPENINGBALANCEYEAR|SAMEPERIODLASTYEAR|LASTNONBLANKVALUE|ISSELECTEDMEASURE|USERPRINCIPALNAME|ROLLUPISSUBTOTAL|ALLCROSSFILTERED|SUMMARIZECOLUMNS|COLUMNSTATISTICS|NATURALINNERJOIN|PREVIOUSQUARTER|PERCENTILEX\\.INC|USERELATIONSHIP|SELECTEDMEASURE|ISCROSSFILTERED|ADDMISSINGITEMS|CONFIDENCE\\.NORM|PERCENTILEX\\.EXC|PATHITEMREVERSE|GENERATESERIES|PARALLELPERIOD|PERCENTILE\\.INC|CALCULATETABLE|STARTOFQUARTER|CONTAINSSTRING|PERCENTILE\\.EXC|COMBINEVALUES|FIRSTNONBLANK|ALLNOBLANKROW|PREVIOUSMONTH|CHISQ\\.DIST\\.RT|DATESINPERIOD|REMOVEFILTERS|SELECTCOLUMNS|SELECTEDVALUE|DISTINCTCOUNT|HASONEFILTER|CURRENTGROUP|ENDOFQUARTER|USEROBJECTID|PATHCONTAINS|LASTNONBLANK|KEYWORDMATCH|DATESBETWEEN|TOPNPERLEVEL|STARTOFMONTH|CHISQ\\.INV\\.RT|RELATEDTABLE|CONFIDENCE\\.T|CONCATENATEX|PREVIOUSYEAR|POISSON\\.DIST|CALENDARAUTO|ROLLUPGROUP|STARTOFYEAR|KEEPFILTERS|NEXTQUARTER|ALLSELECTED|ISONORAFTER|NORM\\.S\\.DIST|ISO\\.CEILING|RANDBETWEEN|LOOKUPVALUE|USERCULTURE|HASONEVALUE|PREVIOUSDAY|GENERATEALL|CONCATENATE|CONTAINSROW|CROSSFILTER|ISFILTERED|ADDCOLUMNS|ENDOFMONTH|SUBSTITUTE|ISSUBTOTAL|TBILLPRICE|DETAILROWS|TBILLYIELD|EXPON\\.DIST|PATHLENGTH|COUNTBLANK|CUSTOMDATA|CHISQ\\.DIST|NORM\\.S\\.INV|COUPDAYSNC|ROUNDDOWN|INTERSECT|TIMEVALUE|ODDLYIELD|T\\.DIST\\.RT|ODDLPRICE|T\\.DIST\\.2T|ISINSCOPE|ODDFYIELD|ODDFPRICE|MDURATION|ISNONTEXT|NORM\\.DIST|SUMMARIZE|NONVISUAL|NEXTMONTH|PRICEDISC|PDURATION|FIRSTDATE|ISLOGICAL|COUNTROWS|DATATABLE|CALCULATE|COUPDAYBS|ENDOFYEAR|CROSSJOIN|BITRSHIFT|BITLSHIFT|BETA\\.DIST|CHISQ\\.INV|YIELDDISC|DATEVALUE|ALLEXCEPT|AMORDEGRC|COUPDAYS|YEARFRAC|PATHITEM|DATESYTD|DATESQTD|NEXTYEAR|DATESMTD|USERNAME|DATEDIFF|CUMPRINC|CONTAINS|CURRENCY|NORM\\.INV|PRICEMAT|COALESCE|STDEVX\\.S|ACCRINTM|TOTALMTD|T\\.INV\\.2T|TOTALQTD|TOTALYTD|AMORLINC|STDEVX\\.P|CALENDAR|AVERAGEA|AVERAGEX|BETA\\.INV|RECEIVED|QUOTIENT|PRODUCTX|LASTDATE|UTCTODAY|YIELDMAT|DISTINCT|IF\\.EAGER|EARLIEST|TOPNSKIP|GEOMEANX|DOLLARDE|DURATION|ISNUMBER|GENERATE|DOLLARFR|TREATAS|COUNTAX|ISAFTER|COUPPCD|ISBLANK|COUPNUM|STDEV\\.P|STDEV\\.S|ISEMPTY|CUMIPMT|AVERAGE|CONVERT|INTRATE|COMBINA|UNICODE|CEILING|IFERROR|PRODUCT|ROUNDUP|UNICHAR|QUARTER|EOMONTH|RADIANS|GEOMEAN|RANK\\.EQ|RELATED|GROUPBY|ISERROR|COUPNCD|REPLACE|WEEKNUM|MEDIANX|WEEKDAY|FILTERS|TBILLEQ|ACCRINT|EARLIER|DEGREES|NEXTDAY|NOMINAL|DATEADD|BITXOR|SWITCH|COMBIN|SAMPLE|IGNORE|DIVIDE|T\\.DIST|BITAND|VARX\\.P|VALUES|PERMUT|FILTER|ISTEXT|ISEVEN|EXCEPT|COUNTA|VARX\\.S|NAMEOF|MROUND|ROLLUP|FORMAT|COUNTX|MINUTE|EFFECT|SEARCH|SQRTPI|MEDIAN|SECOND|UTCNOW|ACOTH|TODAY|BITOR|ERROR|TRUNC|ROUND|FLOOR|ACOSH|EXACT|YIELD|ATANH|FIXED|T\\.INV|ASINH|PRICE|RIGHT|COUNT|VAR\\.P|VALUE|LOG10|LOWER|ISPMT|ISODD|MONTH|EDATE|UPPER|FALSE|UNION|VAR\\.S|BLANK|RANKX|POWER|FIND|SUMX|MAXA|RAND|XNPV|ACOT|RATE|HOUR|TANH|LEFT|HASH|ACOS|TIME|XIRR|DISC|TOPN|MAXX|MINX|MINA|SINH|EVEN|YEAR|COTH|IPMT|ATAN|SIGN|TRIM|SQRT|COSH|PATH|PPMT|ASIN|REPT|NPER|TRUE|DATE|FACT|VDB|ABS|TAN|MID|ALL|AND|COS|COT|DAY|DDB|EXP|GCD|INT|LCM|LOG|SYD|MAX|MIN|MOD|SUM|SLN|SIN|RRI|ROW|PMT|LEN|ODD|NOW|NOT|PI|IF|PV|DB|OR|LN|FV)\\b"
                },
                {
                    "name": "variable.language.dax",
                    "match": "\\b(AT|ASC|BOOLEAN|BOTH|BY|COLUMN|CREATE|CURRENCY|DATETIME|DAY|DEFINE|DESC|DOUBLE|EVALUATE|FALSE|INTEGER|MEASURE|MONTH|NONE|ORDER|RETURN|SINGLE|START|STRING|TABLE|TRUE|VAR|YEAR|IN|NOT)\\b"
                },
                {
                    "name": "keyword.array.constructor.dax",
                    "match": "(?x)\n { | }"
                },
                {
                    "name": "keyword.operator.comparison.dax",
                    "match": "(?x)\n > | < | >= | <= | =(?!==)\n"
                },
                {
                    "name": "keyword.operator.logical.dax",
                    "match": "(?x)\n && | \\|\\|"
                },
                {
                    "name": "keyword.arithmetic.operator.dax",
                    "match": "(?x)\n \\+ | \\- | \\* | \\/ \n"
                },
                {
                    "begin": "\\[",
                    "end": "\\]",
                    "name": "entity.name.label.dax"
                },
                {
                    "begin": "\"",
                    "end": "\"",
                    "name": "string.quoted.double.dax"
                },
                {
                    "begin": "\\'",
                    "end": "\\'",
                    "name": "entity.name.label.dax"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.dax",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.dax",
                    "match": "\\\\."
                }
            ]
        },
        "metas": {
            "patterns": [
                {
                    "begin": "\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "meta.brace.round.dax"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "meta.brace.round.dax"
                        }
                    }
                }
            ]
        }
    },
    "scopeName": "source.dax"
}